//AUTHOR : Nathan Rega
//COURSE : CPT187
//PURPOSE : Saves a user name and password of a user so they can login.
//CREATEDATE : 2/16/22
package edu.cpt187.rega.exercise6;

import java.util.Scanner;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class UserAccounts 
{

	//declare and initialize class attributes
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	private final int MAXIMUM_RECORDS = 50;
	private String[] userNames = new String[MAXIMUM_RECORDS];
	private String[] passwords = new String[MAXIMUM_RECORDS];
	private String masterFileName = "";
	private int recordCount = 0;
	private int searchedIndex = 0;

	//constructors
	//non-default constructor
	UserAccounts(String borrowedFileName)
	{
		masterFileName = borrowedFileName;
	} //END OF non-default constructor

	//setters
	//setter to assign all fields in a specified file to each record
	public void setUserAccountArrays()
	{
		//try block
		try
		{
			//statement to assign RESET_VALUE to recordCount
			recordCount = RESET_VALUE;

			Scanner infile = new Scanner (new FileInputStream(masterFileName));

			//test condition for hasNext and maximum records
			while(infile.hasNext() == true && recordCount < MAXIMUM_RECORDS)
			{
				userNames[recordCount] = infile.next();
				passwords[recordCount] = infile.next();
				recordCount++;
			} //END OF while for field assignment
			infile.close();
		} //END OF try

		//catch block
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		} //END OF catch
	} //END OF setUserAccountArrays()

	//setter to assign getSeqSearch(borrowedUserName) to searchedIndex
	public void setSearchedIndex(String borrowedUserName)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
	} //END OF setSearchedIndex

	//overloaded setter to assign
	public void setSearchedIndex(String borrowedUserName, String borrowedPassword)
	{
		searchedIndex = getSeqSearch(borrowedUserName);

		//selection structure
		if(searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword) == false)
		{
			searchedIndex = NOT_FOUND;
		} //END OF if(searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword) == false)
	} //END OF overloaded setSearchedIndex

	//setter to assign
	public void setWriteOneRecord(String borrowedUserName, String borrowedPassword)
	{
		//try block
		try
		{
			//instantiation statement for PrintWriter
			PrintWriter filePW = new PrintWriter(new FileWriter(masterFileName, true));

			filePW.printf("%n%s\t%s", borrowedUserName, borrowedPassword);

			recordCount++;

			filePW.close();
		} //END OF try

		//catch block
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		} //END OF catch

	} //END OF setWriteOneRecord

	//getters
	//getter that returns localFound after SeqSearch
	public int getSeqSearch(String borrowedBorrowedUserName)
	{
		int localIndex = 0;
		int localFound = NOT_FOUND;

		//validation loop
		while (localIndex < recordCount)
		{
			//selection structure
			if (borrowedBorrowedUserName.equalsIgnoreCase(userNames[localIndex]))
			{
				localFound = localIndex;
				localIndex = recordCount;
			} //END OF if (borrowedID == itemIDs[localIndex])
			else
			{
				localIndex++;
			} //END OF else
		} //END OF validation loop

		return localFound;
	} //END OF getSeqSearch

	//getter that returns borrowedBorrowedPassword.equals(passwords[searchedIndex]);
	public boolean getPasswordMatch(String borrowedBorrowedPassword)
	{
		return borrowedBorrowedPassword.equals(passwords[searchedIndex]);

	} //END OF getPasswordMatch

	//getters that returns masterFileName
	public String getFileName()
	{
		return masterFileName;
	} //END OF getFileName

	//getter that returns MAXIMUM_RECORDS
	public int getMaximumRecords()
	{
		return MAXIMUM_RECORDS;
	} //END OF getMaximumRecords

	//getter that returns record count
	public int getRecordCount()
	{
		return recordCount;
	} //END OF getRecordCount

	//getter that returns searchedIndex
	public int getSearchedIndex()
	{
		return searchedIndex;
	} //END OF getSearchedIndex

} //END OF UserAccounts
